#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
#include<queue>
using namespace std;

/*
2019.06.27.목.
*/

int n, m, k;
int land[11][11];//처음에 주어지는 값 저장..
int food[11][11];//초기화가 되는지 모르겠다.
//근데 나무가 한 자리에 여러 개가 들어갈 수 있어서
//어떻게 저장하지..?
vector<int> tree[11][11];//추가가 되는 값은
//뭐.. 여러 개가 들어가는데 나이 같은 거 들어가겠죠
vector<pair<pair<int, int>, int>> deadTree;
int dir[8][2] = { {1, 0}, {-1, 0}, {0, 1}, {0, -1}, {1, 1}, {1, -1}, {-1, 1}, {-1, -1} };

//
void planting(int y, int x, int t)
{
	//사실 t는 안받아와도 되겠다.
	for (int i = 0; i < 8; i++)
	{
		int ny = y + dir[i][0];
		int nx = x + dir[i][1];
		if (ny >= 1 && ny <= n && nx >= 1 && nx <= n)//범위에 맞다면
		{
			//나무를 심자. 나이가 1인 나무로
			//나무 심었으면.. 그거 해줘야되는데;;
			//나이 작은 순으로 정렬해주는 거.
			tree[ny][nx].push_back(1);
		}
	}
}

void sortTree()
{
	//모든 나무에 대해서
	for(int i=1;i<=n;i++)
		for (int j = 1; j <= n; j++)
		{
			sort(tree[i][j].begin(), tree[i][j].end());
		}
}

int main() {

	cin >> n >> m >> k;
	
	//맨 처음에는 양분이 5만큼 주어짐.
	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= n; j++)
			food[i][j] = 5;

	//land 정보
	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= n; j++)
			cin >> land[i][j];

	//심은 나무 정보.어떻게 저장하지?
	int y, x, age;
	for (int i = 0; i < m; i++)
	{
		cin >> y >> x >> age;
		tree[y][x].push_back(age);
	}

	//맨 처음에는 한 그루만 심기 때문에
	//나이 순을 고려하지 않아도 된다.

	//k번의 계절이 지나간다.
	for (int i = 0; i < k; i++)
	{
		//봄
		//모든 나무가 자신의 나이만큼의 양분을 먹고 나이가 1 증가한다.
		//못 먹으면 나중에 죽어요.
		for(int a=1;a<=n;a++)
			for (int b = 1; b <= n; b++)
			{
				//나무가 심겨져 있는 곳에서
				//영양분을 먹는다.
				if (tree[a][b].size() != 0)
				{
					//모든 나무가 먹어야 되는데 ^>^
					//정렬이 돼있는 상태라 고려
					for (int t = 0; t < tree[a][b].size(); t++)
					{
						//양분을 나이만큼 먹어서 양분이 사라짐.
						food[a][b] -= tree[a][b][t];
						if(food[a][b]>=0)//0까진 먹어도 되니까
							tree[a][b][t] += 1;
						else
						{
							//음수가 됐으면 못 먹는거거든
							//그러면 뺐던 것을 다시 넣어주자고.
							food[a][b] += tree[a][b][t];
							deadTree.push_back(make_pair(make_pair(a, b),t));
							//나무가 죽은 것을 표시하자.
						}
						//아니라면 못 먹어서 이 나무는 쥬금. 쥬그면 얘는.. 나중에 거름이 됩니다. 근데.. 그것도 따로 표시를 해야되는데;;
					}
				}
			}

		//여름
		//죽은 나무들이 양분이 된다.
		//cout << deadTree.size() << "크기\n";
		for (int d = 0; d < deadTree.size(); d++)
		{
			//cout << "어디서 틀렸어?\n";
			//cout << d << endl;
			int y = deadTree[d].first.first;
			//cout << "y값" << endl;
			int x = deadTree[d].first.second;
			//cout << "x값" << endl;
			int age = deadTree[d].second;
			//cout << "age" << age << endl;
			//cout << tree[y][x].size() <<"개화나ㅏ네"<< endl;
			//cout << tree[y][x][age] << "없어??" << endl;
			food[y][x] += tree[y][x][age] / 2;// 값이 땅에 추가됨
			//이 위치의 나무의 양분을 알아오자
			tree[y][x][age] = -10;//표시를 해둡시다.
			//cout << age << endl;
			//for (int k = 0; k < tree[y][x].size(); k++)
			//	cout << tree[y][x][k] << " 뭐냐구" << endl;

			//이거.. 양분 계산 다 하고 나서 지워야 되구나..
			//tree[y][x].erase(tree[y][x].begin() + age);
			//for (int k = 0; k < tree[y][x].size(); k++)
			//	cout << tree[y][x][k] << "삭제했어" << endl;
			
			//cout << "뭐가문제야" << endl;
		}
		
		//아.. 지우면서 인덱스값이 안맞게 되니까 그런 거구나. 한 군데에
		//죽는 나무가 여러 그루가 있으면 그렇게 되니까;;
		for (int d = 0; d < deadTree.size(); d++)
		{
			int y = deadTree[d].first.first;
			int x = deadTree[d].first.second;
		
			for (vector<int>::iterator it = tree[y][x].begin(); it != tree[y][x].end();)
			{
				//cout << *it << "그럼 니는 뭐냐"<<endl;
				if (*it == -10) {
					//cout << "발견한거야??" << endl;
					it = tree[y][x].erase(it);
				}
				else
					it++;
			}
			//for (int i = 0; i < tree[y][x].size(); i++)
				//cout << "안 없애는거니?" << tree[y][x][i] << endl;
		}
		//처리 다 했으면 일단 비워주자. 잊을 수도 있으니깐.
		//cout << "문제찾기" << endl;
		deadTree.clear();

		//cout << "꼮꼮" << endl;
		//가을
		//나이가 5의 배수인 나무들이 번식을 한다.
		for(int a = 1;a <= n; a++)
			for (int b = 1; b <= n; b++)
			{
				for (int t = 0; t < tree[a][b].size(); t++)
				{
					//cout << "숨어라" << endl;
					if (tree[a][b][t] % 5 == 0)//5의 배수라면
					{
						//8방향으로 나무를 심는다.
						//그건 함수로 심어주자.
						planting(a, b, t);
					}
				}
			}

		//나무들을 나이 순으로 정렬해준다.
		sortTree();

		//겨울
		//양분을 추가로 준다.
		for(int a=1;a<=n;a++)
			for (int b = 1; b <= n; b++)
			{
				food[a][b] += land[a][b];
			}
	}

	//4계절이 다 지나갔다면

	int sum = 0;
	for(int i=1;i<=n;i++)
		for (int j = 1; j <= n; j++)
		{
			sum += tree[i][j].size();
		}

	cout << sum << '\n';

	return 0;
}
