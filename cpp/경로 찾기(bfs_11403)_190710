#include<iostream>
#include<queue>
using namespace std;

vector<int> nums[100];//처음에 주어진 연결된 정보를 저장.
int n;
int arr[100][100];//초기 상태.. 생각해보니 굳이 필요 없는 것 같기도 함.
int ans[100][100];//결과.

/*
2019.07.10.수.
경로찾기 11403. bfs 이용. 계속해서 연결 정보를 찾는다.
*/

void bfs(int num)
{
	int check[100]={0,};//방문 체크. 체크해서 계속안되게 막아줌
	queue<int> q;//확인할 수를 넣을 큐
	q.push(num);//초기에 num을 먼저 넣음.

	while(!q.empty())
	{
		int number=q.front();
		q.pop();
		
		//number와 연결이 되어 있는 모든 수에 대해서
		for(int i=0;i<nums[number].size();i++)
		{
			int tmp=nums[number][i];

			//방문하지 않은 수라면 방문표시를 해주고 연결해줌.
			if(check[tmp]==0){
				check[tmp]=1;
				ans[num][tmp]=1;//연결돼있다고 표시해주기.
				q.push(tmp);//그리고 그 수와 연결된 다른 수도 num과 연결할 수 있도록 q에 넣어줌. 
			}
		}
	}
}

int main()
{
	cin.tie(0);
	cin>>n;

	for(int i=0;i<n;i++)
		for(int j=0;j<n;j++)
		{
			cin>>arr[i][j];
			if(arr[i][j]==1)
				nums[i].push_back(j);//연결된 정보를 저장한다.
		}

	//모든 수에 대해 bfs 진행.
	for(int i=0;i<n;i++)
		bfs(i);

	//결과 출력
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++)
			cout<<ans[i][j]<<" ";
		cout<<endl;
	}

	return 0;
}
