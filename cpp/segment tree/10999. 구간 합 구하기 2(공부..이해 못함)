#include <string>
#include <vector>
#include <iostream>
#include <queue>
#include <algorithm>
#include <cstring>

using namespace std;

/*
20.06.11.금
10999. 구간 합 구하기 2(공부..이해 못함)
하나가 아니라 구간을 변화시켜야 할 때는
lazy propagation을 사용해서 풀면 빠르게 풀 수 있다.
정말 어렵다.

https://bowbowbow.tistory.com/4
이 분이 잘 설명을 해두셔서 이걸로 따라서 해봤는데
한 번에 이해가 되지 않았다. 사실 지금도 막 그렇게 이해가 잘 되고 그런 건 아님.

...
하지만 그래도 정리를 해보겠다.
일단은 Tree 자료구조는 합의 값과 lazy 값을 가지고 있다.
lazy는 아래로 내려가면서 적용되고 사라지게 됨.

init 함수에서는 이전과 동일하게 트리를 먼저 구성해준다.

update_range 함수에서는 i~j구간까지의 값을 diff로 변경을 한다.
이 때 lazy 값이 남아있으면 그 값을 반영을 하고
자식으로 넘겨줘야한다.
그리고 0으로 해준다.
범위 안 맞으면 안 보면 되는 거고 
범위가 맞다면 diff를 적용해준다.
이 때 자식도 변경을 해줘야 하기 때문에 lazy 값을 자식에 적용해준다.
그러면 완성된 거고.
밑에 업데이트 두 개는..아직 원하는 값을 못 찾아서
더 내려가보는 것 같은데... 하하..하하하하하. 아닐지도..;
그런 후에 자식에서 반영된 lazy를 부모에 적용을 하기 위해 
자식 노드 값을 부모 노드에 반영해준다.
ㅠㅠ..

sum도 비슷한 맥락이긴 한데 여기성 ㅙ lazy를 하는지 모르겠다
어차피 다 끝난 상태라고 생각했는데 sum 하기 전에..
그냥 너무 어려워 ㅋㅋㅋ 새로운 자료구조는 항상 날 미치게 하지.
*/

long long arr[1000010];
typedef struct Tree {
	long long value, lazy;
}Tree;

Tree tree[4 * 1000010];

//최초로 세그먼트 트리 대표값 지정하는 함수
long long init(int node, int start, int end) {
	if (start == end)
		return tree[node].value = arr[start];
	else
	{
		int mid = (start + end) / 2;
		return tree[node].value = init(node * 2, start, mid) + init(node * 2 + 1, mid + 1, end);
	}
}

//diff는 실제로 바꿀 값이고 lazy는 위에서 받아 내려온 값인데 아직 적용 안된 애인건가..?
//i~j 구간에 diff만큼 더해줄 때 segmentTree 업데이트 하는 함수.
void update_range(int node, int start, int end, int i, int j, long long diff) {

	//lazy가 남아있으면 
	if (tree[node].lazy != 0) {
		//값에 반영을 하고
		tree[node].value += (end - start + 1)*tree[node].lazy;
		//자식에 lazy를 반영해주고 나는 0이 됩니다.
		if (start != end) {
			tree[node * 2].lazy += tree[node].lazy;
			tree[node * 2 + 1].lazy += tree[node].lazy;
		}
		tree[node].lazy = 0;
	}

	//범위가 안맞으면.. 바이?
	if (j < start || i > end) return;

	//범위가 맞아여.
	if (i <= start && end <= j) {
		//구간 값 변경. 개수 * 변화 값을 더해준다. 응..
		tree[node].value += (end - start + 1) *diff;
		if (start != end) {
			//자식에도 더해준다.
			tree[node * 2].lazy += diff;
			tree[node * 2 + 1].lazy += diff;
		}
		//리턴 하는 거 맞아여......??
		//왜 리턴해요...?
		//아니 종료조건이 필요한 것 같기는 한데
		//머리에서 안돌아가요 ㅋㅋㅋ.
		return;
	}

	//솔직히 겁나 이해 안돼..
	//여기 밑에서 하는 건 뭐냐고..ㅋㅋㅋ
	//위에 리턴 한거랑 뭔 관계인데..
	//리턴이 이해 안되는 것 같음....
	//그럼 이거는 범위는 안벗어나는데 대표구간을 못 찾았을 떄 인가요....???
	//내가 찾는 범위가 아니라서 더 내려가야될 때겠지.
	update_range(node * 2, start, (start + end) / 2, i, j, diff);
	update_range(node * 2 + 1, (start + end) / 2 + 1, end, i, j, diff);

	tree[node].value = tree[node * 2].value + tree[node * 2 + 1].value;
}

long long sum(int node, int start, int end, int i, int j) {
	//아니 근데 sum에서도 lazy를 해줘야 되는거에여..?
	//sum에서 근데 그러면 업데이트 하고 있는거잖아 지금..;
	//왜.. 뭐.. 반영 안된 게 있니...?
	if (tree[node].lazy != 0) {
		tree[node].value += (end - start + 1)*tree[node].lazy;
		if (start != end) {
			tree[node * 2].lazy += tree[node].lazy;
			tree[node * 2 + 1].lazy += tree[node].lazy;
		}
		tree[node].lazy = 0;
	}

	if (i> end || j < start) return 0; 
	if (i <= start && end <= j) return tree[node].value; 
	return sum(node * 2, start, (start + end) / 2, i, j) + sum(node * 2 + 1, (start + end) / 2 + 1, end, i, j);
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	int n, m, k;
	cin >> n >> m >> k;
	for (int i = 1; i <= n; i++)
		cin >> arr[i];

	init(1, 1, n);
	for (int i = 1; i <= m + k; i++) {
		int t1, a, b;
		long diff;
		cin >> t1;
		if (t1 == 1) {
			cin >> a >> b >> diff;
			update_range(1, 1, n, a, b, diff);
		}
		else {
			cin >> a >> b;
			cout << sum(1, 1, n, a, b)<<'\n';
		}
	}

	return 0;
}
