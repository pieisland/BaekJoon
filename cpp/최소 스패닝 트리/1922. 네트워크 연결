#include <string>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

/*
200711
크루스칼 알고리즘 구현이라 생각하면 되는데.
이거 이론 공부는 했었는데 문제를 풀어보질
않았었구나.
그래서 뭘 할 수가 없었다 ㅋㅋㅋ..

안경잡이 개발자 블로그 보고 했음.

일단 정점과 간선 간의 관계를 저장하기 위해
구조체를 만들었다.
이름은 Tree라고 짓기는 했는데 좋은 명은 아닌 것 같고..
아무튼 이어진 두 정점의 가중치들을 저장했다.

정점이 어떤 부모를 가지고 있는지를 set이라는 배열에
저장헸는데 인덱스 0부터 시작해서 나중에
-1 해서 저장하는 거 기억하시고.
최초에는 모두 자기 자신을 부모로 가지고 있다.

이 알고리즘에서 중요한 건 가중치를
오름차순으로 정렬해야 한다는 점이다.

그래서 탐욕기법이라고 설명한다.
오름차순으로 정렬을 하면 가장 가중치가 낮은 것부터
선택을 하게 되는데
그 중에서 부모가 이미 같아서 다시 연결하면
사이클이 되는 애가 아니면 연결해주면 된다.
그렇게 되면 우리가 원하는 결과가 나온다.

부모를 합치는 unionParent
부모를 찾아오는 getParent
부모가 같은지 확인하는 find 함수를
잘 기억하고 있어야 할 것이다.

getParent는 최종 부모가 나올 때까지
재귀호출을 해나가는데
솔직히 처음에는 이해가 잘 안됐음..
부모라고 저장된 값과 내 값이 같으면 그제서야 return을 하는거고
아니라면 현재 나의 부모값을 매개변수로 넘겨서
찾을 때까지 계속 호출.

unionParent 함수는 getParent 함수를 이용해
각 정점의 부모를 찾고
값이 더 작은 부모를 설정한다.
부모 통일 완료.

find 함수는 getParent 함수로 두 정점의 부모를 찾아
두 부모가 같은지 확인한다.
두 부모가 같다면 1을 return하는데
1을 리턴하게 되면 이미 연결이 되어있는 상태이기 때문에
둘을 연결 시 사이클이 발생하게 되어 연결하면 안됨.
그래서 0을 리턴했을 때 가중치를 더하고
두 정점을 연결해준다.

vec에 저장돼있는 모든 값에 대해서 다 확인을 하면
다 끝났으면 find에서 걸러질 것이기 때문에
구하는 것 끝임.
*/


int v, e;
int a, b, c;
//이렇게 큰 것도 되나요?
int set[10000];//정점의 개수는 10000개까지 가능.
int answer;
//딱히 정점의 번호랄 것도없는데.
//인덱스라고 생각하면 되는건가.

typedef struct Tree{
	int a;
	int b;
	int c;
};

vector<Tree> vec;

//이러면 c값이 작은 게 처음으로 오겠지?
bool cmp(Tree a, Tree b) {
	return a.c < b.c;
}

//부모 노드 찾기
//이것만 해도 부모가 찾아지는 이유는
//set에는 맨 처음에는 자기자신만 포함이 되어있는데
//연결을 하면서 가장 작은 값을(부모)를 set 값으로 가지게 된단 말이야?
int getParent(int set[], int x) {
	if (set[x] == x) return x;
	return set[x] = getParent(set, set[x]);
}

//부모 설정
void unionParent(int set[], int a, int b) {
	a = getParent(set, a);//a의 부모 값과
	b = getParent(set, b);//b의 부모 값 중에
	//더 작은 값을 부모로 해주고 연결해줄거다 아마.
	if (a < b) set[b] = a;
	else set[a] = b;
}

//같은 부모를 가지면 1, 아니면 0
int find(int set[], int a, int b) {
	a = getParent(set, a);
	b = getParent(set, b);
	if (a == b) return 1;
	else return 0;
}

int main(void) {
	
	scanf("%d", &v);
	scanf("%d", &e);

	for (int i = 0; i < e; i++) {
		scanf("%d %d %d", &a, &b, &c);

		Tree t;
		t.a = a;
		t.b = b;
		t.c = c;
		vec.push_back(t);
	}

	sort(vec.begin(), vec.end(), cmp);

	/*for (int i = 0; i < vec.size(); i++) {
		cout << vec[i].c << endl;
	}*/

  for (int i = 0; i < v; i++) {
		set[i] = i;
	}

	for (int i = 0; i < vec.size(); i++) {
		//동일한 부모를 가르키지 않는 경우 합친다.
		//그 말은 즉 사이클이 발생하지 않았다는 의미이고
		//둘을 합치면서 다시 부모를 재정비
		if (!find(set, vec[i].a - 1, vec[i].b - 1)) {
			answer += vec[i].c;
			unionParent(set, vec[i].a - 1, vec[i].b - 1);
		}
	}

	printf("%d", answer);

	return 0;
}
