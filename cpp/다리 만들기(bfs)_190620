#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
#include<queue>
using namespace std;

/*
19.06.20.목.
이 문제같은 경우는 모든 경우의 수를 구해도 시간초과가 안났다.
아무래도 숫자가 작아서(100까지임) 그런 것 같음.
*/

int n;
int arr[100][100];
int c[100][100];
int dir[4][2] = { {1, 0}, {-1, 0}, {0, 1}, {0, -1} };

bool isInside(int y, int x)
{
	if (y >= 0 && y < n && x >= 0 && x < n)
		return true;
	else
		return false;
}

void bfs(int y, int x, int num)
{
	queue<pair<int, int>> q;
	q.push(pair<int, int>(y, x));

	while (!q.empty())
	{
		int cy, cx;
		cy = q.front().first;
		cx = q.front().second;
		q.pop();

		for (int i = 0; i < 4; i++)
		{
			int ny = cy + dir[i][0];
			int nx = cx + dir[i][1];
			if (isInside(ny, nx) && c[ny][nx] == 0 && arr[ny][nx] == 1)
			{
				c[ny][nx] = 1;
				arr[ny][nx] = num;//다른 수로 바꿔서 섬 구분.
				q.push(pair<int, int>(ny, nx));
			}
		}
	}
}

//다른 섬으로 갈 수 있는 모든 경우의 수를 구함.
int bfs2(int s, int y, int x)
{

	memset(c, 0, sizeof(c));
	queue<pair<int, int>> q;
	q.push(pair<int, int>(y, x));
	c[y][x] = 1;
	
	while (!q.empty())
	{
		int cy, cx;
		cy = q.front().first;
		cx = q.front().second;
		int num = arr[cy][cx];
		q.pop();

		//0이 아니면서 다른 수라면 다른 섬에 도착한 것.
		if (num != 0 && num != s)
		{
			//cout <<"결론위치"<< cy <<" "<< cx << endl;
			//cout << c[cy][cx] << endl;
			return c[cy][cx] - 2; //나의 위치와 다른 섬의 위치의 값은 뺴줘야 함.
		}

		for (int i = 0; i < 4; i++)
		{
			int ny = cy + dir[i][0];
			int nx = cx + dir[i][1];
			
			if (isInside(ny, nx) && c[ny][nx] == 0 && arr[ny][nx] !=s )
			{
				c[ny][nx] = c[cy][cx] + 1;
				q.push(pair<int, int>(ny, nx));
			}
		}
	}
}

int main(){

	cin >> n;
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++) {
			cin >> arr[i][j];
		}

	//숫자 부여
	int num = 1;
	for(int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
		{
			//방문하지 않았으며, 섬이라면
			if (arr[i][j] == 1 && c[i][j] == 0) {
				arr[i][j] = num;
				c[i][j] = 1;
				bfs(i, j, num);
				num++;
			}
		}

	int ans = 100000;
	int tans;
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
		{
			//최단을 찾아야되는데, 모든 경우의 수를 따짐.
			if (arr[i][j] != 0)
			{
				int s = arr[i][j];
				tans = bfs2(s, i, j);

				if (tans < ans)
					ans = tans;
			}
		}

	cout << ans << endl;
	
	//섬들을 그룹지음.
	/*for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++)
		{
			cout << arr[i][j]<<" ";
		}
		cout << endl;
	}*/

	return 0;
}
