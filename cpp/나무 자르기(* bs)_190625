#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
#include<queue>
using namespace std;

/*
2019.06.25.화.
이진탐색. 나무를 자르는 최적의 절단기 높이 찾기.
이진탐색은 중간 값을 정답이라고 생각을 하고 탐색을 시작하잖아.
어떤 경우에 따라서 그 값보다 작아야되는지, 커야되는지를 판단을 해야돼.
얘는 답이 인덱스 값이 아니라 높이 자체.
있는 애들 중에서 찾는 게 아니라, 높이를 비교하면서 찾아야 된다.
*/

vector<int> number;

int slice(int h, int target)
{
	long long int sum = 0;
	for (int v : number)
		sum += v - h > 0 ? v - h : 0;

	if (sum >= target)
		return 1;
	else
		return 0;
}

int BSearch(int target)
{
	int low = 0;
	int high = 2000000000;
	
	while (low <= high)
	{
		int mid = (low + high) / 2;

		if (slice(mid, target))
			low = mid + 1;//타겟이상이면 높이를 더 늘려보면, 잘리는 양이 줄어든다.
		else//아직 타겟 안되면, 높이를 줄인다? 더 많이 잘려야 되니까
			high = mid - 1;
	}
	return high;
}

int main(){

	int n, m;
	cin.tie(NULL);
	cin >> n >> m;

	int tmp;
	for (int i = 0; i < n; i++)
	{
		cin >> tmp;
		number.push_back(tmp);
	}
	sort(number.begin(), number.end());

	cout << BSearch(m) << "\n";
		
	return 0;
}
