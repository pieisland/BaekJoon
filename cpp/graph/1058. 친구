#include <string>
#include <vector>
#include <iostream>
#include <map>
#include <queue>

using namespace std;

/*
20.06.09.화
1058. 친구
그래프 문제는 이렇게 푸는 게 되게 편한 것 같네요.
세 문제 모두 형식이 같아.
*/

int n;//사람의 수
int check[51];//연결 관계 확인용

vector<int> v[51];//서로의 친구를 저장.

//check초기화. 각 사람마다 확인해야 하기 때문.
//이전까지 푼 문제는 한 사람에서 출발하면 되는 거였기 때문에
//이게 필요하진 않았음.
void clearCheck() {
	for (int i = 0; i < 51; i++) {
		check[i] = 0;
	}
}

void bfs(int n) {
	queue<int> q;
	q.push(n);

	while (!q.empty()) {
		int num = q.front();
		q.pop();

		for (int i = 0; i < v[num].size(); i++) {
			int con = v[num][i];
			if (check[con] == 0) {
				q.push(con);
				check[con] = check[num] + 1;
			}
		}
	}
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	cin >> n;
	for (int i = 0; i < n; i++) {
		string s;
		cin >> s;
		for (int j = 0; j < s.size(); j++) {
			if (s[j] == 'Y') {
				//친구다
				v[i].push_back(j);//친구인 애를 넣어줌.
			}
		}
	}

	int ans = 0;
	for (int i = 0; i < n; i++) {
		clearCheck();
		check[i] = 1;
		bfs(i);
		//이렇게 해서 나온 결과가 있을 거 아니냐.
		int cnt = 0;
		for (int j = 0; j < n; j++) {
			//친구거나 친구의 친구라면
			if (check[j] == 2 || check[j] == 3) {
				cnt++;
			}
		}
		if (cnt > ans) ans = cnt;
	}

	cout << ans <<'\n';

	return 0;
}
