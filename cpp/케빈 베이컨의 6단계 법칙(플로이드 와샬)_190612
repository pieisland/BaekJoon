#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
#include<queue>
using namespace std;

/*
19.06.12.수.
플로이드 와샬만 알면 풀 수 있는 문제.
초기화로 큰 값을 넣어주어야 하고
무방향 그래프이기 때문에 두 개의 방향에 값을 함께 넣어준다.
그리고 가장 빠르게 갈 수 있는 값을 찾아서 다 더해준 후 비교하면 되는 문제.
*/

int MAX = 1000000;
int n, m;
int arr[101][101];
int ans[101];

int main(void)
{
	cin >> n >> m;

	//초기화.
	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= n; j++)
			arr[i][j] = MAX;

	int a, b;
	//무방향 그래프이기 떄문에 서로 넣어준다.
	for (int i = 0; i < m; i++)
	{
		cin >> a >> b;
		arr[a][b] = 1;
		arr[b][a] = 1;
	}

	for (int k = 1; k <= n; k++)//거쳐가는 정점
	{
		for (int i = 1; i <= n; i++)//시작 정점
		{
			for (int j = 1; j <= n; j++)//끝 정점
			{
				if (i == k || j == k || i==j)
					continue;

				//가장 작은 것 찾기.
				if (arr[i][j] > arr[i][k] + arr[k][j])
					arr[i][j] = arr[i][k] + arr[k][j];
			}
		}
	}

	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= n; j++) {
			//cout << arr[i][j] << " ";
			if (i == j)// 자신을 제외하고 내 정점에서 다른 정점으로 갈 수 있는 거리를 모두 더해준다.
				continue;
			ans[i] += arr[i][j];
		}
		//cout << endl;
	}

	int idx;
	int min = 100000000;
	//가장 작은 값을 찾는다.
	for (int i = 1; i <= n; i++)
	{
		if (ans[i] < min) {
			min = ans[i];
			idx = i;
		}
	}
	cout << idx << endl;

	//for (int i = 1; i <= n; i++)
	//	cout << ans[i] << " ";

	return 0;
}
