#include <string>
#include <vector>
#include <iostream>
#include <queue>
#include <algorithm>

using namespace std;

/*
20.06.11.목
1941. 소문난 칠공주
이 문제를 풀면서 많이 배웠습니다.
일단.. dfs 같은 경우는 그게 한 길로 쭉 가는 거라는 것.
그래서 이 문제에서 원하는 대로 만들어 지지 않는다는 것..

그래서 이 문제를 풀 때는 원하는 개수를 선택한 후에
연결이 되어있나 4명 이상인가 이렇게 판단을 해야하는데
2차원 배열에서 선택을 할 때 
1차원 같이 번호를 붙이고 그걸 나중에
2차원으로 만들면 된다는 사실..

나는 position이라는 배열에 저렇게 넣어두긴 했지만
다른 사람들을 보니까
1차원 값이 있을 때 5로 나눈 몫은 i가 되고
나머지는 j가 된다는 것을 알 수 있었다.

근데 어떻게 하든 솔직히 헷갈리기는 함...ㅋㅋㅋ
아무튼 그렇고, 서로 연결되어 있는 걸 확인하는 데서도
이걸 어떻게 해야하나 했는데
어째저째 좀 더럽긴 하지만 해결함..
*/

char student[5][5];
int dir[4][2] = { {1, 0}, {-1, 0}, {0, 1}, {0, -1} };
int check[25];

//그냥 여기다가 넣어두면 될 것 같은데.
int position[25][2];

int ans;

bool isConnect() {

	int pos[7][2]; //7개의 위치를 저장해둔다.
	int c[7] = { 0, }; //확인한 위치인지를 저장한다.

	int cnt = 0;
	for (int i = 0; i < 25; i++) {
		if (check[i] == 1) {
			pos[cnt][0] = position[i][0];
			pos[cnt][1] = position[i][1];
			cnt++;
		}
	}
	
	queue<pair<int, int>> q;
	q.push({ pos[0][0], pos[0][1] });
	c[0] = 1;
	cnt = 1;
	while (!q.empty()) {
		int y = q.front().first;
		int x = q.front().second;
		q.pop();
		
		for (int i = 0; i < 4; i++) {
			int ny = y + dir[i][0];
			int nx = x + dir[i][1];

			//여기를 좀 편하게 하려면
			//checkselect라는 2차원 배열을 만들어서
			//선택된 애들에 대해서 1을 넣어두면 쉽게 찾긴 하겠다.
			for (int j = 0; j < 7; j++) {
				if (c[j] == 1) continue;
				//이런 식으로.. 그 안에 있는 거다 라고 하면.
				if (pos[j][0] == ny && pos[j][1] == nx)
				{
					c[j] = 1;
					cnt++;
					q.push({ ny, nx });
				}
			}
		}
	}

	if (cnt == 7) return true;
	else return false;
}

void dfs(int start, int cnt) {
	if (cnt == 7) {
		//이렇게 뽑은 애들이 check에 저장이 되기 때문에
		//그냥 check인 애들을 보면 되는데요.
		int som = 0, yeon = 0;
		for (int i = 0; i < 25; i++) {
			if (check[i] == 1) {
				int y = position[i][0];
				int x = position[i][1];
				if (student[y][x] == 'S')
					som++;
			}
		}
		//이게 4명 이상이어야 하니까.
		if (som >= 4) {
			if (isConnect()) ans++;
		}

		return;
	}
	
	if (start >= 25) return;

	for (int i = start; i < 25; i++) {
		if (check[i] == 1) continue;
		check[i] = 1;
		dfs(i + 1, cnt + 1);
		check[i] = 0;
	}
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	for (int i = 0; i < 5; i++) {
		for (int j = 0; j < 5; j++) {
			cin >> student[i][j];
		}
	}

	for (int i = 0; i < 5; i++) {
		int num;
		for (int j = 0; j < 5; j++) {
			num = 5 * i + j;
			position[num][0] = i;
			position[num][1] = j;
		}
	}

	//25개 중에서 7개를 뽑기
	dfs(0, 0);

	cout << ans << '\n';

	return 0;
}
