#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
#include<queue>
using namespace std;

/*
19.06.12.수.
핵심은 익은 토마토들을 먼저 넣어주어야 최소값을 구할 수 있다는 거였다.
*/

int n, m, h;
int tomato[100][100][100];
int check[100][100][100];
int ans = -1000; // 모든 토마토가 익는 데 걸리는 시간.
int dir[6][3] = { {1, 0, 0}, {-1, 0, 0}, {0, 1, 0}, {0, -1, 0}, {0, 0, 1}, {0, 0, -1} };

struct position {
	int i;
	int j;
	int k;

	//초기화하기
	position(int a, int b, int c):i(a),j(b),k(c){}
};

queue<position> q;

bool isInside(int a, int b, int c)
{
	if (a >= 0 && a < h&&b >= 0 && b < m&&c >= 0 && c < n)
		return 1;
	else
		return 0;
}

void bfs()
{
	//큐에 집어넣은 후에.
	while (!q.empty())
	{
		int n1, n2, n3;
		n1 = q.front().i;
		n2 = q.front().j;
		n3 = q.front().k;
		
		//꺼내서 
		q.pop();

		//6방향에 대해서 bfs를 수행
		for (int i = 0; i < 6; i++)
		{
			int _n1 = n1 + dir[i][0];
			int _n2 = n2 + dir[i][1];
			int _n3 = n3 + dir[i][2];

			//범위에 해당되고, 아직 방문하지 않았으며, 덜 익은 토마토라면
			if (isInside(_n1, _n2, _n3) && check[_n1][_n2][_n3]==0 && tomato[_n1][_n2][_n3]==0)
			{
				position tmp(_n1, _n2, _n3);
				//이제 방문했구요.
				check[_n1][_n2][_n3] = check[n1][n2][n3]+1;
				//토마토가 익었으니, 
				tomato[_n1][_n2][_n3] = 1;
				q.push(tmp);

				if (ans < check[_n1][_n2][_n3])
					ans = check[_n1][_n2][_n3];
			}
		}
	}	
}

//토마토가 이미 다 익었다면, 
bool ripeCheck(int num)
{
	if (num == 1)//토마토가 다 익었는지 체크
	{
		for (int i = 0; i < h; i++)
		{
			for (int a = 0; a < m; a++)//행의 개수
			{
				for (int b = 0; b < n; b++)//열의 개수
				{
					//하나라도 0인 토마토가 있으면
					if (tomato[i][a][b] == 0)
						return 1;//이면 bfs 수행하세요ㅣ
				}
			}
		}
		return 0;//이미 다 익었는데?
	}
	else //토마토가 덜익은 게 있는지 체크입니다.
	{
		for (int i = 0; i < h; i++)
		{
			for (int a = 0; a < m; a++)//행의 개수
			{
				for (int b = 0; b < n; b++)//열의 개수
				{
					if (tomato[i][a][b] == 0) {
						return 0;//어 그러면 일수 계산 못해.
					}
				}
			}
		}
		return 1;//아 그러면 ans를 출력하자.
	}
}

int main(void)
{
	cin >> n >> m >> h;
	for (int i = 0; i < h; i++)
	{
		for (int a = 0; a < m; a++)//행의 개수
		{
			for (int b = 0; b < n; b++)//열의 개수
			{
				cin >> tomato[i][a][b];
			}
		}
	}
	
	bool b = ripeCheck(1);
	if (b == 0) {
		//이미 다 익었기 때문에, 할 필요 없다.
		cout << 0 << endl;
		return 0;
	}

	for (int i = 0; i < h; i++)
	{
		for (int a = 0; a < m; a++)//행의 개수
		{
			for (int b = 0; b < n; b++)//열의 개수
			{
				if (check[i][a][b] == 0 && tomato[i][a][b] == 1)
				{
					position temp(i, a, b);
					q.push(temp);
					check[i][a][b] = 1;
				}
			}
		}
	}
	//처음에 익은 토마토들을 모두 check 값을 1로 다 넣어준 후에 bfs를 돌려야 된다.
	bfs();

	/*for (int i = 0; i < h; i++)
	{
		for (int a = 0; a < m; a++)//행의 개수
		{
			for (int b = 0; b < n; b++)//열의 개수
			{
				cout << tomato[i][a][b] << " ";
			}
			cout << endl;
		}
		cout << endl;
	}*/

	//안익은 토마토가 있는지 체크합니다.
	b = ripeCheck(0);
	if (b == 0)
	{
		cout << -1 << endl;
		return 0;
	}

	//0이 안 익은 토마토이고 1 이상이 익은 토마토이면서 날짜를 세는 거였기 떄문.
	//처음에 익은 토마토를 1로 줬는데 그 날짜는 원래 0일 째이기 때문에 -1을 해줘야 함.
	cout << ans-1 << endl;

	return 0;
}
