#include <string>
#include <vector>
#include <iostream>
#include <queue>
#include <algorithm>

using namespace std;

/*
20.06.10.수
3020. 개똥벌레
이 문제는 이분탐색 문제인데
여기서 알아가야 할 거는..
algorithm에 있는 lower_bound 라는 함수를 알아가자.
lower_bound(시작 주소, 끝 주소, 목표 값, [정렬(기본 오름차순)])
이렇게 하면 배열에서 목표 값 이상의 값이 나오는 첫번쨰 인덱스의 주소를 반환한다.
그래서 실제 사용할 때는 배열의 시작 주소를 빼주면 인덱스를 알 수 있게 된다.

지금 문제에서 vector에 석순과 종유석 정보를 넣어놨는데
lower_bound를 이용해서 높이 i 값이상이 나오는 인덱스를 구하고
전체 개수에서 그 인덱스를 빼면 그 인덱스 포함해서 뒤에 있는 애들은
모두 충돌하게 된다는 의미지.

그냥 좀.. 이해가 됐으면 해서 실제 값으로 해보자면
만약에 인덱스 값으로 0을 준거야.
그러면 전체 7개에서 0을 빼면 7개가 다 충돌한다는 거고
인덱스 값으로 1을 반환을 하면
첫번째부터 마지막까지 다 충돌을 한다는 거거든. 0번 제외하고.
ㅇㅇ.. 이해가 되려나 

암튼 그리고 더 짜증나는 건 사실 종유석인데.
종유석은 거꾸로 매달려 있는거잖아?
그래서 이거를 실제 쓸 때는 바닥으로 생각을 하고 하는데
전체 높이가 5일 때, 개똥벌레가 1을 날아가고 있을 때의 상황이
종유석을 뒤집어서 석순처럼 만든 상황에서 보면 개똥벌레는 5를 날아가고 있는거지.
그래서 위치가 높이가 h+1-i 값이 되는거야.
1일 때 5, 2일때 4, 3일때 3, 4일때 2, 5일때 1 이니까..
x = h + 1 - i

*/

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	int n, h;
	cin >> n >> h;

	vector<int> sun(n/2);
	vector<int> ju(n/2);

	for (int i = 0; i < n/2; i++) {
		cin >> sun[i];
		cin >> ju[i];
	}

	sort(sun.begin(), sun.end());
	sort(ju.begin(), ju.end());

	//각 높이마다
	int cnt = 0;
	int minVal = 987654321;
	for (int i = 1; i <= h; i++) {
		//lower_bound가 return하는 값은
		//i라는 값 이상이 나오는 처음 인덱스를 리턴하는데
		//만약에 0을 리턴했다고 한다면 모든 게 충돌이 되는거겠죠.
		int tmp = sun.size() - (lower_bound(sun.begin(), sun.end(), i) - sun.begin());
		tmp += ju.size() - (lower_bound(ju.begin(), ju.end(), h + 1 - i) - ju.begin());

		if (tmp < minVal) {
			minVal = tmp;
			cnt = 1;
		}
		else if (tmp == minVal) {
			cnt++;
		}
	}

	cout << minVal << " " << cnt << '\n';

	return 0;
}
