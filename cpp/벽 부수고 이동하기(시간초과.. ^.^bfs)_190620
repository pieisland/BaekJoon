#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
#include<queue>
using namespace std;

/*
19.06.19.수.

*/

int n, m;
int arr[1000][1000];
int c[1000][1000];
int dir[4][2] = { {1, 0}, {-1, 0}, {0, 1}, {0, -1} };
vector<pair<int, int>> wall;

//int ans;

bool isInside(int y, int x)
{
	if (y >= 0 && y < n && x >= 0 && x < m)
		return true;
	else
		return false;
}

//벽을 부수면 부순 곳을 bfs 돌린 후에 다시 보수공사 해야댐.
int bfs()
{
	//cout << "asdfasdffffff" << endl;
	//또 돌거니까, 
	memset(c, 0, sizeof(c));

	queue<pair<int, int>> q;
	q.push(pair<int, int>(0, 0));
	c[0][0] = 1;

	while (!q.empty())
	{
		//cout << "asdfasdf" << endl;
		int cy, cx;
		cy = q.front().first;
		cx = q.front().second;
		q.pop();

		//마지막 위치에 도달했다면, 
		if (cy == n-1 && cx == m-1)
			return c[cy][cx];

		for (int i = 0; i < 4; i++)
		{
			int ny, nx;
			ny = cy + dir[i][0];
			nx = cx + dir[i][1];

			if (isInside(ny, nx) && c[ny][nx] == 0 && arr[ny][nx] == 0)
			{
				c[ny][nx] = c[cy][cx] + 1;
				q.push(pair<int, int>(ny, nx));
			}
		}
	}
	return -1;
}

int main(){

	cin >> n >> m;
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++) {
			scanf("%1d", &arr[i][j]);
			if (arr[i][j] == 1)//벽이라면
				wall.push_back(pair<int, int>(i, j));
		}

	//처음에는 벽 안 부순 상태에서 구함
	int ans = bfs();
	//cout << ans << endl;

	int py, px;
	for (int i = 0; i < wall.size(); i++)
	{
		py = wall[i].first;
		px = wall[i].second;
		//벽 허물기 0으로 만들기
		arr[py][px] = 0;
		int temp = bfs();

		//cout << temp << endl;
		if (temp != -1)
		{
			if (ans == -1)
				ans = temp;
			else
			{
				if (temp < ans)
					ans = temp;
			}
		}

		//다시 벽 세움.
		arr[py][px] = 1;
	}

	cout << ans << endl;

	return 0;
}
