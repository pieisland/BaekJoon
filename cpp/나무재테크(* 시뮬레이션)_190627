#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
#include<queue>
using namespace std;

/*
2019.06.27.목.
작년에 글만 읽고 나온 문제..
앞에 거는 답이 나오는데 시간초과 나와서.. 하..
그렇게 차이도 없는 것 같은데
봄과 여름을 함께 처리해 간단하게 했다.
죽은 나무를 어떻게 처리해야되나 어려웠는데
아예 저 부분에서 처리하니까 엄청 편함...;;
근데 참ㅋㅋㅋ.. 어렵다.
*/

int n, m, k;
int land[11][11];//처음에 주어지는 값 저장..
int food[11][11];//초기화가 되는지 모르겠다.
//근데 나무가 한 자리에 여러 개가 들어갈 수 있어서
//어떻게 저장하지..?
vector<int> tree[11][11];//추가가 되는 값은
//뭐.. 여러 개가 들어가는데 나이 같은 거 들어가겠죠
vector<pair<pair<int, int>, int>> deadTree;
int dir[8][2] = { {1, 0}, {-1, 0}, {0, 1}, {0, -1}, {1, 1}, {1, -1}, {-1, 1}, {-1, -1} };

//
void planting(int y, int x, int t)
{
	//사실 t는 안받아와도 되겠다.
	for (int i = 0; i < 8; i++)
	{
		int ny = y + dir[i][0];
		int nx = x + dir[i][1];
		if (ny >= 1 && ny <= n && nx >= 1 && nx <= n)//범위에 맞다면
		{
			//나무를 심자. 나이가 1인 나무로
			//나무 심었으면.. 그거 해줘야되는데;;
			//나이 작은 순으로 정렬해주는 거.
			tree[ny][nx].push_back(1);
		}
	}
}

void sortTree()
{
	//모든 나무에 대해서
	for(int i=1;i<=n;i++)
		for (int j = 1; j <= n; j++)
		{
			sort(tree[i][j].begin(), tree[i][j].end());
		}
}

int main() {

	cin >> n >> m >> k;
	
	//맨 처음에는 양분이 5만큼 주어짐.
	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= n; j++)
			food[i][j] = 5;

	//land 정보
	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= n; j++)
			cin >> land[i][j];

	//심은 나무 정보.어떻게 저장하지?
	int y, x, age;
	for (int i = 0; i < m; i++)
	{
		cin >> y >> x >> age;
		tree[y][x].push_back(age);
	}

	//맨 처음에는 한 그루만 심기 때문에
	//나이 순을 고려하지 않아도 된다.

	//k번의 계절이 지나간다.
	for (int i = 0; i < k; i++)
	{
		//봄과 여름
		//모든 나무가 자신의 나이만큼의 양분을 먹고 나이가 1 증가한다.
		//못 먹으면 나중에 죽어요.
		for(int a=1;a<=n;a++)
			for (int b = 1; b <= n; b++)
			{
				//나무가 심겨져 있는 곳에서
				//영양분을 먹는다.
				if (tree[a][b].size() != 0)
				{
					int dead = 0;
					vector<int> temp;

					for (int t = 0; t < tree[a][b].size(); t++)
					{
						int age = tree[a][b][t];

						//남아 있는 음식 양이 나이 이상이라면
						if (food[a][b] >= age)
						{
							food[a][b] -= age;//음식을 먹을 수 있고
							temp.push_back(age + 1);//새로 저장
						}
						else//음식을 못 먹으면 양분이 된다.
							dead += age / 2;
					}

					//죽은 애도 있기 때문에 지워주고 temp 값을 다시 넣는다.
					tree[a][b].clear();
					for (int i = 0; i < temp.size(); i++)
						tree[a][b].push_back(temp[i]);

					//양분을 채운다.
					food[a][b] += dead;
				}
			}

		//가을
		//나이가 5의 배수인 나무들이 번식을 한다.
		for(int a = 1;a <= n; a++)
			for (int b = 1; b <= n; b++)
			{
				for (int t = 0; t < tree[a][b].size(); t++)
				{
					if (tree[a][b][t] % 5 == 0)//5의 배수라면
					{
						//8방향으로 나무를 심는다.
						//그건 함수로 심어주자.
						planting(a, b, t);
					}
				}
			}

		//나무들을 나이 순으로 정렬해준다.
		sortTree();

		//겨울
		//양분을 추가로 준다.
		for(int a=1;a<=n;a++)
			for (int b = 1; b <= n; b++)
			{
				food[a][b] += land[a][b];
			}
	}

	//4계절이 다 지나갔다면
	int sum = 0;
	for(int i=1;i<=n;i++)
		for (int j = 1; j <= n; j++)
		{
			sum += tree[i][j].size();
		}

	cout << sum << '\n';

	return 0;
}
