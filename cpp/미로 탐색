#include<cstdio>
#include<iostream>
#include<vector>
#include<queue>
#include<algorithm>

using namespace std;

/*
이것도 내가 푼 게 아님.. ^>^...;
출처: https://blockdmask.tistory.com/182
뭐가 왜 필요한지도 꼼꼼히 적어두시고
어려운 표현도 없으며 깔끔하고 변수 선언도 잘 되어있어
이해하기 쉬웠음.

bfs를 사용해야되는 경우는 어떤 건지를 좀 느낀 것 같고
(경우의 수가 여러 개 있음. 거기서 최소값을 찾을 때..
 ㅠㅠ 근데 4방향의 순서를 바꿔도 결과가 같이 나오는 게 이해가 잘 안돼서
 손코딩 해봐야 이해 될 듯.)
queue에서 pair를 사용하는 방법,
변수 명을 깔끔하게 짓는 방법도 배움.

차근차근 뭐가 필요한지 파악하고, 그것을 표현을 할 수 있어야 되는데.. ^.^ 연습 진짜 많이 필요.
*/

int n, m;

int map[100][100];
//지나왔는지, 몇번째인지 정보를 저장. 하나의 변수에 두 가지 정보를 함꼐 저장 ㅎ.ㅎ
int c[100][100];
int dir[4][2] = { {1, 0}, {-1, 0}, {0, 1}, {0, -1} };//위, 아래, 오른쪽, 왼쪽

//맵 안인지 검사.
int isInside(int y, int x)
{
	if (y >= 0 && y <= n - 1 && x >= 0 && x <= m - 1)
	{
		return 1;
	}
	else
		return 0;
}

void bfs()
{
	 //맨 처음 (0, 0)위치.
	 int cy = 0, cx = 0;

	 //큐는 좌표를 저장을 하기 위해 pair를 사용함.
	 queue<pair<int, int>> q;
	 q.push(pair<int, int>(cy, cx));
	 c[cy][cx] = 1;

	 while (!q.empty())
	 {
		 //pair 큐에서 값을 꺼내는 방법. first, second...
		 cy = q.front().first;
		 cx = q.front().second;

		 q.pop();

		 //도착 지점인 경우라 함.
		 if ((cy == n - 1) && (cx == m - 1)) break;

		 //사방으로 가는 경우에 대해 검사.
		 for (int i = 0; i < 4; i++)
		 {
			 //새로 바뀔 위치.
			 int ny = cy + dir[i][0];
			 int nx = cx + dir[i][1];
			 
			 //맵 안에 있으며, 아직 가지 않았고, 갈 수 있는 길이라면,
			 if (isInside(ny, nx) && c[ny][nx] == 0 && map[ny][nx] == 1)
			 {
				 //몇 번째로 걸은 길인지가 저장됨.
				 c[ny][nx] = c[cy][cx] + 1;
				 q.push(pair<int, int>(ny, nx));
			 }
		 }
	 }
	 cout<< c[n - 1][m - 1];
}

int main()
{
	cin >> n >> m;

	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			int a;
			scanf("%1d", &a);
			if (a == 1)
				map[i][j] = 1;
		}
	}

	bfs();

	return 0;
}
