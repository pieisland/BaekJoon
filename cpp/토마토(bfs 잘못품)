#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
#include<queue>
using namespace std;

int m, n;
int a[1000][1000];
int check[1000][1000];
int dir[4][2] = { {1, 0}, {-1, 0}, {0, 1}, {0, -1} };

int isInside(int a, int b)
{
	if (a >= 0 && a < n&&b >= 0 && b < m)
		return 1;
	else
		return 0;
}

void bfs(int y, int x, int num)
{
	queue<pair<int, int>> q;
	check[y][x] = num;

	q.push(pair<int, int>(y, x));

	while (!q.empty())
	{
		int cy = q.front().first;
		int cx = q.front().second;
		q.pop();

		for (int i = 0; i < 4; i++)
		{
			int ny = cy + dir[i][0];
			int nx = cx + dir[i][1];
			//그 점이 범위가 맞고, 안 익은 토마토이며, 아직 안 본 애라면.
			if (isInside(ny, nx) && a[ny][nx] == 0 && check[ny][nx] == 0)
			{
				q.push(pair<int, int>(ny, nx));
				check[ny][nx] = check[cy][cx] + 1;
			}
		}
	}
}

int main()
{
	cin >> m >> n;

	int zero = 0;
	int one = 0;

	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			cin >> a[i][j];
			if (a[i][j] == 0)
				zero++;
			else if (a[i][j] == 1)
				one++;
		}
	}

	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			if (check[i][j] == 0 && a[i][j] == 1)//아직 안 갔고 토마토가 있으면
			{
				bfs(i, j, 0);//근데... 맨 첫 날이 0일 지난 거라서 저렇게 되는데..;
				check[i][j] = 1;
			}
			if (a[i][j] == -1)
			{
				check[i][j] = -1;
			}
		}
	}

	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			cout << check[i][j];
		}
		cout << endl;
	}

	return 0;
}
