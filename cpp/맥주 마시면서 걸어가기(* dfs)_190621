#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
#include<queue>
using namespace std;

/*
19.06.21.금.
깊이 우선 탐색으로 문제를 해결한다.
출처는 꾸준함 님이다.

어떤 정보를 담아야 할까?
깊이 우선 탐색이기때문에, 이미 탐색을 했는지를 검사할 배열
arr을 사용.
그리고 아까와 마찬가지로 정점을 저장해야되고.
정점에서 다른 정점으로 갈 수 있으면 그 정점이 갈 수 있는 다른 정점을
저장하는 vec 배열도 있어야겠다.

모든 정점 쌍에 대해서 맨해튼 거리가 1000보다 작으면
서로 갈 수 있음을 나타내기 위해 vec에 넣어준다.
시작 정점 0부터 시작해서 dfs를 돈다.
돌면서 방문했음을 체크해주고, 마지막 정점과 방문을 해야지만
기쁘게 도착한 것..^.^
그래서 뭐, 마지막에 1인지만 확인해주면 된다고.
*/

int n;
int arr[102];//a정점에서 갈 수 있는 경로들 모두 확인 했는지 저장.
vector<int> vec[102]; //한 정점에서 다른 정점으로 갈 수 있는 점들을 저장.
vector<pair<int, int>> pos; // 모든 점들의 위치값을 저장.

void dfs(int num)
{
	arr[num] = 1;
	//이미 1이면 return 하는것도 적어야 되긴 할 터.

	for (int i = 0; i < vec[num].size(); i++)
	{
		//아직 방문 안 했으면
		if (arr[vec[num][i]]==0)
		{
			dfs(vec[num][i]);
		}
	}
}

int main(){
	
	int t;
	cin >> t;
	while (t--)
	{
		cin >> n;
		n += 2;

		int a, b;
		for (int i = 0; i < n; i++)
		{
			cin >> a >> b;
			pos.push_back(pair<int, int>(a, b));
		}

		//이렇게 해야 중복 없이 저장 가능.
		for(int i=0;i<n;i++)
			for (int j = i+1; j < n; j++)
			{					
				int x = pos[i].first - pos[j].first;
				if (x < 0)x = -x;
				int y = pos[i].second - pos[j].second;
				if (y < 0)y = -y;
				
				//20병의 맥주를 모두 마셔도 상관없는 거리는 1000까지.
				if (x + y <= 1000) {
					//양방향 그래프니까 같이 저장해주기.
					vec[i].push_back(j);
					vec[j].push_back(i);
				}
			}

		//시작 점에 대해서 dfs 시작.
		dfs(0);

		//시작 위치에서 페스티벌까지 맥주 안 떨어지고 갈 수 있으면,
		//맥주가 다 떨어지면 값이 102를 바로 넣기 떄문에.
		if (arr[n - 1] == 1)
			cout << "happy" << endl;
		else
			cout << "sad" << endl;
		
		pos.clear();

		//이런 형태의 벡터는 하나하나마다 클리어를 해줘야되구나.
		for (int i = 0; i < 102; i++)
			vec[i].clear();
		memset(arr, 0, sizeof(arr));
	}

	return 0;
}
