#include <string>
#include <vector>
#include <iostream>
#include <queue>
#include <algorithm>
#include <cstring>

using namespace std;

/*
20.06.11.목
11066. 파일 합치기
어려워여...
과연 내가 이걸 혼자 할 수 있을까요 ㅋㅋㅋ
솔직히 재귀함수로 풀 때는 모든 과정을 보기가 힘드니까
이해하기가 더 힘든 것 같다 이거죠.

여기서 공부해야 할 것은
1. 1부터 i까지 합을 구하는 데 있어서 
i-1까지 더한 값 + 지금 값 하면 쉽게 구할 수 있다는 점.
(쓸 데 없는 반복문을 더 돌리지 않아도 된다는 의미)

2. 재귀함수로 구현하는 dp

3. 메모이제이션
*/

int d[501][501];
int cost[501];
int sum[501];

//i부터 j까지 파일 합치는 최소 비용 구함?
/*
해설을 좀 하자면
go(i, j)의 의미는 i부터 j까지 파일을 합치는 데 드는 최소 비용인데
1. 하나를 합치진 않으니까 i와 j가 같으면 return 0.
2. -1이 아니라는 의미는 이미 구한 값이 있다는 것이라 
또 구하지 말자 해서 return 그 값.
3. i에서 k까지 k+1에서 j까지 둘로 나누어서
그 둘을 합치는 데 드는 비용의 최소를 구하는 거죠.
뒤에 sum 부분이 이해가 안될 수 있는데 
문제를 보면 알겠지만.. 그 두 개를 합치는 데 드는 비용을 합한 걸
또 더해주는 게 있거든요. 그래서 저런 식으로 하는데
그 값이 i에서 j 파일까지 합치는 비용이라서 저걸 더해주는 겁니다.

재귀를 돌면서 여차저차 가장 작게 합치는 값들이 구해졌겠죠.
(ㅠㅠㅠ 안보이니까 이해하기 힘들다구..)
거기서 tmp가 가장 작은 거를 정답으로 해주면 된다는 것입니다.
흑.
*/
int go(int i, int j) {
	if (i == j) return 0;

	if (d[i][j] != -1) return d[i][j];

	for (int k = i; k <= j - 1; k++) {
		int tmp = go(i, k) + go(k + 1, j) + sum[j] - sum[i - 1];
		//i에서 j까지의 합을 구한거죠. 뒤에 sum은요
		if (d[i][j] == -1 || d[i][j] > tmp) d[i][j] = tmp;
	}
	return d[i][j];
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	int t;
	cin >> t;
	for (int tc = 0; tc < t; tc++) {
		int k;
		cin >> k;
		//초기화 해줘야지요.
		memset(d, -1, sizeof(d));
		for (int i = 1; i <= k; i++) {
			cin >> cost[i];//각 파일에 대한 크기를 저장.
			//이거는 그냥 굳이 뭐 덮어쓸 거라서 안해주는듯.
			
			//이거는 1에서 i번째까지의 합을 구하는 중.
			//이렇게 하면 쉽게 구할 수 있죠.
			sum[i] = sum[i - 1] + cost[i];
		}

		cout<< go(1, k) << '\n' ;
	}

	return 0;
}
