#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
#include<queue>
using namespace std;

int n;
int map[25][25];
vector<int> cnt;
int check[25][25];
int dir[4][2] = { {1, 0}, {-1, 0}, {0, 1}, {0, -1} };
int vilidx;
int vilnum[90000];

bool isinside(int y, int x) {
	if (y >= 0 && y < n&&x>=0 && x < n) return true;
	else return false;
}

void func(int y, int x) {

	check[y][x] = 1;//왔다고 표시를 해줍시다.
	vilnum[vilidx]++; //해당 단지의 세대 개수를 센다.

	for (int i = 0; i < 4; i++) {
		int ny = y + dir[i][0];
		int nx = x + dir[i][1];
		if (isinside(ny, nx) && check[ny][nx] == 0 && map[ny][nx]==1) {
			check[ny][nx] = 1;
			func(ny, nx);
		}
	}

	//딱히 return이 없어도 되는걸까..?
}

int main()
{
	scanf("%d", &n);
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
			scanf("%1d", &map[i][j]);

	//개수를 dfs 내에서 세는 걸로.
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			if (check[i][j] == 0 && map[i][j] == 1) {
				//check값을 확인하기 때문에 값을 바꾸지 않아도 된다.
				func(i, j);
				vilidx++;//단지의 개수를 세고있다.
			}
		}
	}
	
	printf("%d\n", vilidx);
	//특정 부분만 sorting하고 싶을 때는 이렇게 한다.
	sort(vilnum, vilnum + vilidx);
	for (int i = 0; i < vilidx; i++)
		printf("%d\n", vilnum[i]);

	return 0;
}
