#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
#include<queue>
using namespace std;

//아무것도 없는 건 0
//벽은 1
//바이러스는 2

int n, m;//세로, 가로
int map[8][8];//맨 처음 주어진 맵
int copymap[8][8];//바이러스 퍼진 맵
queue<pair<int, int>> virus;//바이러스의 위치를 담음. 큐로 담은 이유는 bfs하려고였는데.
vector<pair<int, int>> walls; //벽을 세울 수 있는 0의 위치를 담음.
vector<int> idx; //선택한 벽의 인덱스값을 저장함
int answer = -1; //제일 큰 값을 저장하기 위해서 제일 작은 값을 저장함.
int dir[4][2] = { {0, 1}, {0, -1}, {1, 0}, {-1, 0} }; //방향. 이게 틀리진 않았구..
int check[8][8];

//순서대로 하는건 선택한 sel이 필요없다.
//그마저도 순서가 있는게 sel이 필요하겠자.

//범위 내에 있는지
int isinside(int y, int x) {
	if (y >= 0 && y < n && x >= 0 && x < m) return 1;
	else return 0;
}

//copymap에 기존에 받은 map을 저장함.
//이거 안해서 혼났음.. 초기화 너무 중요하고요..
void mapCopy() {
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			copymap[i][j] = map[i][j];
}

//맵에서 발견하는 버전. 이게 더 시간이 많이 걸렸던 것 같음.
void bfs2(int y, int x) {
	queue<pair<int, int >> q2;
	q2.push({ y, x });
	check[y][x] = 1;

	while (!q2.empty()) {
		int cy = q2.front().first;
		int cx = q2.front().second;
		q2.pop();
		check[cy][cx] = 1;

		for (int i = 0; i < 4; i++)
		{
			int ny = cy + dir[i][0];
			int nx = cx + dir[i][1];
			if (isinside(ny, nx) && check[ny][nx] == 0 && copymap[ny][nx] == 0) {
				copymap[ny][nx] = 2;
				check[ny][nx] = 1;
				q2.push({ ny, nx });
			}
		}
	}
}

//copymap에서 바이러스를 퍼뜨린다.
void bfs() {
	//push pop하면서 값이 바뀔 것이기 때문에 새로 저장한다.
	queue<pair<int, int>> virus2 = virus;

	while (!virus2.empty()) {

		int cy = virus2.front().first;
		int cx = virus2.front().second;
		virus2.pop();
		check[cy][cx] = 1;

		for (int i = 0; i < 4; i++) {
			int ny = cy + dir[i][0];
			int nx = cx + dir[i][1];

			if (isinside(ny, nx)==1 && copymap[ny][nx] == 0&&check[ny][nx]==0)
			{
				copymap[ny][nx] = 2;//바이러스 오염됨
				check[ny][nx] = 1;
				virus2.push({ ny, nx });
			}
		}
	}
}

int zeroCnt() {

	int ret = 0;

	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			if (copymap[i][j] == 0)//안전영역이면
				ret++;

	return ret;
}

void dfs(int start, int cnt) {

	//세 개를 다 골랐으면 해야됨..
	if (cnt == 3) {
		//어차피 세 개를 고른거라서 그냥 3하면 됨.
		for (int i = 0; i < 3; i++) {
			int y = walls[idx[i]].first;
			int x = walls[idx[i]].second;
			//벽을 세운다.
			copymap[y][x] = 1;
		}
		
		bfs();
		int val = zeroCnt();

		if (answer < val) answer = val;

		//벽을 다시 허물어야겠지..
		for (int i = 0; i < 3; i++) {
			int y = walls[idx[i]].first;
			int x = walls[idx[i]].second;
			copymap[y][x] = 0;
		}
		
		//이것도 초기화
		for (int i = 0; i < 8; i++)
			for (int j = 0; j < 8; j++)
				check[i][j] = 0;

		//맵 초기화
		mapCopy();

		return;	
	}

	if (start >= walls.size()) return;

	for (int i = start; i < walls.size(); i++) {
		idx.push_back(i);
		dfs(i+1, cnt + 1);
		idx.pop_back();

		//idx는 여기서 푸시 팝 하기 때문에 초기화할 필요가 없네. 꿀이다.
	}
}

int main()
{
	scanf("%d %d", &n, &m);
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			scanf("%d", &map[i][j]);
			
			//바이러스 위치를 저장해서 bfs에서 사용
			if (map[i][j] == 2) {
				virus.push({ i, j });
			} //0인건 빈칸이니까 빈칸에서 세 개를 택한다는 거다.
			else if (map[i][j] == 0) //벽도 저장해야 선택하니까.
				walls.push_back({ i, j });

		}
	}

	mapCopy();
	dfs(0, 0);

	printf("%d", answer);

	return 0;
}

/*
이 문제는 dfs와 bfs를 모두 하는 문제이기 떄문에
(dfs는 벽 선택, bfs는 바이러스 퍼뜨릴 때)
코딩테스트 감 잃었을 때 연습하기 좋은 문제인 것 같다.
그리고 초기화 하는 부분때문에 내가 한 3시간 정도를 날렸으니까..
교훈으로 삼아야지.

[알게된 사실]
1. 초기화는 너무 중요하다. 혹시 값이 이상하게 나온다면 초기화를 안했는지 확인하자.
2. 순서 없이 선택하는 ncr을 할 때는 sel 값(선택했다는 것을 저장)이 없어도 된다.
3. 초기화 함수를 따로 만들어서 한꺼번에 호출하는 게 나을 것 같다.
4. bfs 유형을 다시 풀어봐야겠다.
*/
