#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
#include<queue>
using namespace std;

//만드는 방법 있지 않나..?
vector<int> vec[1001];
int c1[1001];
int c2[1001];

//시작 정점을 줬는데.
void dfs(int n) {
	//선택한 애면 리턴한다는 거잖아..?
	if (c1[n] == 1) return;
	c1[n] = 1;
	printf("%d ", n);
	for (int i = 0; i < vec[n].size(); i++)
		dfs(vec[n][i]);
}

int main()
{
	//정점의 개수, 간선의 개수, 시작 정점 번호
	int n, m, v;
	scanf("%d %d %d", &n, &m, &v);
	for (int i = 0; i < m; i++) {
		int a, b;
		scanf("%d %d", &a, &b);

		vec[a].push_back(b);
		//양방향이라서 넣어줬다.
		vec[b].push_back(a);
	}

	//작은 것부터 하라고 해서 정렬을 시켜준거다.
	for (int i = 1; i <= 1000; i++)
		sort(vec[i].begin(), vec[i].end());

	//dfs
	dfs(v);//시작 정점을 넘겨준다.
	printf("\n");

	//bfs
	queue<int> q;

	//먼저 시작 정점을 넣고
	q.push(v);
	c2[v] = 1; //방문 표시를 하고
	while (!q.empty()) {
		int number = q.front();
		printf("%d ", number);
		q.pop();
		for (int i = 0; i < vec[number].size(); i++) {
			int val = vec[number][i];
			if (c2[val] == 0) {
				q.push(val);
				c2[val] = 1;
			}
		}
	}

	return 0;
}


/*
진짜 기억 너무 안나서 처은부터 하고있는 이 처지가
너무 슬프고. 화나고. 짜증나고 그렇다.
인생 살기 싫네. 죽지 못해 사네.
*/
