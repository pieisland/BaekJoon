#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
#include<queue>
using namespace std;

int m, n, k;//세로 가로 몇 개
int map[101][101];
int check[101][101];
vector<int> cnt2;
int cnt[101 * 101];
int dir[4][2] = { {1, 0}, {-1, 0}, {0, 1}, {0, -1} };
int ans;

int isinside(int y, int x) {
	if (y >= 0 && y < m && x >= 0 && x < n) return 1;
	else return 0;
}

void makebox(int y1, int x1, int y2, int x2) {
	for (int y = y1; y < y2; y++) {
		for (int x = x1; x < x2; x++) {
			map[y][x] = 1;
		}
	}
}

void showMap() {
	for (int i = 0; i < m; i++)
	{
		for (int j = 0; j < n; j++) {
			printf("%d ", map[i][j]);
		}
		cout << endl;
	}
}

void dfs(int y, int x, int count) {

	//초반에 맨 처음 받을 때 개수 증가하고 checm도 해주고 map도 변경해줘야된다.
	//그리고 for문 안에서는.. 아마 안해도 될거야. 어차피 넘어오면 하잖아.. 근데 써놨네 ㅋ.ㅋ
	//모르겠다 혹시 잘 안되는건지 뭔지.
	//맨 처음 함수를 호출할 때 좀 중요하다는 거.
	cnt2[count]++;
	check[y][x] = 1;
	map[y][x] = -1;

	for (int i = 0; i < 4; i++) {
		int ny = y + dir[i][0];
		int nx = x + dir[i][1];

		if (isinside(ny, nx) && check[ny][nx] == 0 && map[ny][nx] == 0) {
			map[ny][nx] = -1; //굳이 필요없...아니구나.
			check[ny][nx] = 1;
			//cnt[count]++;
			dfs(ny, nx, count);
		}
	}
}

int main()
{
	scanf("%d %d %d", &m, &n, &k);
	int y1, x1, y2, x2;
	for (int i = 0; i < k; i++) {
		scanf("%d %d %d %d", &x1, &y1, &x2, &y2);
		makebox(y1, x1, y2, x2);
	}

	for (int i = 0; i < m; i++) {
		for (int j = 0; j < n; j++) {
			if (map[i][j] == 0 && check[i][j] == 0) {
				cnt2.push_back(0);
				dfs(i, j, ans);
				ans++;
			}
		}
	}

	//showMap();
	//생각해보니 sort를 쉽게 하려고 벡터로 새로 만든거였는데
	//굳이 안 만들고 그냥 cnt, cnt+ans 이런 식으로 해도 될텐데..
	sort(cnt2.begin(), cnt2.end());

	printf("%d\n", ans);
	for (int i = 0; i < ans; i++)
		printf("%d ", cnt2[i]);

	return 0;
}
