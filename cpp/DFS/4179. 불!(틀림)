#include <string>
#include <vector>
#include <iostream>
#include <queue>
#include <algorithm>

using namespace std;

/*
20.06.11.목
4179. 불!
메모리초과가 되어서 그런지 아무것도 안나온다.
*/

char board[1000][1000];
char tmpboard[1000][1000];
int check[1000][1000];//사실 간 곳은 다시 갈 수 없다 이런 이야기 없어서
//굳이 안 필요한 것 같음. 불이 확산 되는 것은 그냥 불이 아닌 곳을 하는 거라서.
int r, c;
int pos[2];
int fire[2];
//일단 불이 번지는 거는 선택의 여지가 없어요.
//그냥 번질 뿐인데..?
//그래서 시간 지날 때마다 일단 불을 버지게 한 후에
//움직이면 되지 않을까 하는 생각이 들었어요.
int dir[4][2] = { {1, 0}, {-1, 0}, {0,1}, {0, -1} };

int ans=987654321;

//사실 더 판단하는 거는 아래에서 하면 되겠어요
bool isinside(int y, int x) {
	if (y >= 0 && y < r && x >= 0 && x < c)
		return true;
	else return false;
}

//불이 번져야 해요.
void bfs(int y, int x) {
	queue<pair<int, int>> q;

	q.push({ y, x });
	check[y][x] = 1;

	while(!q.empty()){
		int cy = q.front().first;
		int cx = q.front().second;

		for (int i = 0; i < 4; i++) {
			int ny = cy + dir[i][0];
			int nx = cx + dir[i][1];

			if (check[ny][nx] == 0 && isinside(ny, nx) && (tmpboard[ny][nx] == '.'||tmpboard[ny][nx] == 'J' )) {
				//벽이면.. 뭐.. 안되거든요..
				check[ny][nx] = 1;
				tmpboard[ny][nx] = 'F';//불이 났습니다.
				q.push({ ny, nx });
			}
		}
		//네 공간에 불을 낸 후에..
	//아니.. 불 내기 전에 움직여야되나..?
		//이 상태에서 지훈이가 불이 안 붙은 곳으로
		//움직인다고 생각을 해야겠죠
		//지훈이가 4방을 봤을 때 불이 안 붙은 곳으로
		//움직일 수 있는 곳을 찾고 거기로 갔다고 가정을 해야할텐데
		//이게 근데.. 진짜 복잡한 것 같아요..
		//어떻게 하는거지?ㅋㅋㅋㅋ
		//지훈이가 어디로 갈 수 있는지르.ㄹ.
		for (int i = 0; i < 4; i++) {
			//int ny = 
		}
	}
}

//이거 진짜 미친듯이 오래 걸리지 않을까..?
void func(char board[][1000]) {
	//불이 붙어요.
	vector<pair<int, int>> f;
	for (int i = 0; i < r; i++) {
		for (int j = 0; j < c; j++) {
			if (board[i][j] == 'F')
				f.push_back({ i, j });
		}
	}

	for (int i = 0; i < f.size(); i++) {
		for (int j = 0; j < 4; j++) {
			int y = f[i].first + dir[i][0];
			int x = f[i].second+dir[i][1];
			if (board[y][x] == '.' || board[y][x] == 'J') {
				board[y][x] = 'F';
			}
		}
	}
	//불이 번졌지요..
}

void copyBoard(char a[][1000], char b[][1000]) {
	for (int i = 0; i < r; i++) {
		for (int j = 0; j < c; j++) {
			b[i][j] = a[i][j];
		}
	}
}

//지훈이가 움직일 거다.
void dfs(int y, int x, char board[][1000], int cnt) {

	cout << y << " "<< x << '\n';

	char boardTmp[1000][1000];
	copyBoard(board, boardTmp);

	//이 상태에서 불이 번진거죠..
	func(boardTmp); //불이 번졌는데.

	for (int i = 0; i < 4; i++) {
		int ny = y + dir[i][0];
		int nx = x + dir[i][1];
		cout << ny << nx << '\n';

		//일단 근데 지훈이는 움직일 때 불이 없는 곳으로 가겠죠..
		//탈출을 하는 거라서 isinside를 쓰는 게 아닌 것 같음.ㅇㅇ.
		//근데 문제가 생길 수 있기는 하니까 신경써야돼... 인덱스 오류난다고.
		//근데 캐릭터로 넘기면 문제 안생기냐..?
		if (board[ny][nx] == '.') {
			cout << "갈 수 있는 공간" << '\n';
			//어차피 지나갈 수 있는 공간만 갈 수 있거든요.
			//내가 여기 가려고 했는데
			if (boardTmp[ny][nx] != 'F') {
				cout << "불안탐.." << '\n';
				//아직 불타지 않았으면
				dfs(ny, nx, boardTmp, cnt + 1);
			}
			else {
				cout << "die..." << endl;
				return;//불에 타면 끝입니다.
			}
		}

		if (isinside(ny, nx) == false) {
			cout << "talchul" << '\n';
			//탈출 성공한 거임.
			if (ans > cnt + 1) ans = cnt + 1;

			cout << ans << '\n';

			return;
		}
	}
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	cin >> r >> c;
	for (int i = 0; i < r; i++) {
		for (int j = 0; j < c; j++) {
			cin >> board[i][j];
			tmpboard[i][j] = board[i][j];

			if (board[i][j] == 'J') {
				pos[0] = i;
				pos[1] = j;
			}

			if (board[i][j] == 'F'){
				fire[0] = i;
				fire[1] = j;
			}
		}
	}

	//이런 비슷한 문제들을 어디서 본 것 같기는 한데..

	//정답을 출력하는데.. 미로를 탈출 못할 수도 있고 해서..
	//어려운 문제인 것 같다.
	//bfs(fire[0], fire[1]);

	dfs(pos[0], pos[1],tmpboard, 0);

	//반대로 생각해서
	//지훈이가 갈 수 있는 모든 경우의 수를 생각을 하고
	//그 위치로 움직였을 때
	//움직인 후에 그 위치가 불이 붙은 위치라면
	//이제 더이상 못 가고 끝내야되고
	//그래서 dfs를 해야될 것 같고
	//근데 결국에 불을 붙이는 건 bfs가 맞기는 한데시발..
	//그런 후에
	//만약에 아직 불이 안 붙었으면
	//또 시간 1 증가시켜서 움직이고
	//이렇게 가요?
	//근데 결국 1초씩 하기 때문에
	//bfs를 굳이 사용하지 않아도 될 수도 있다.
	//그냥.. F인 곳을 기준으로 해서 사방으로만
	//해주면 되니까?
	//아니 근데 이게 문제는 무뭐냐면..
	//여러 개를 한다면 다시 돌아가기 위해서
	//그 값을 완전히 저장을 하는 게 아니라
	//tmp로 가지고 있어야 되는 거 아니야?

	cout << ans << '\n';

	return 0;
}
