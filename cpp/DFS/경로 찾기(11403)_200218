#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
#include<queue>
using namespace std;

int n;//정점의 개수
int arr[101][101]; //주어진 것을 담을 배열
int ans[101][101]; //실제 정답을 담을 배열
int check[101][101]; //했던 걸 다시 하지 않기 위함.
vector<int> vec[101]; //연결상태를 쉽게 얻기 위함.

void dfs(int from, int to) {
	ans[from][to] = 1; //연결이 되어있음을 표시.
	check[from][to] = 1; //확인했음을 표시.
	//체크하는걸로 좀 막아줘야할 듯.

  //to와 연결된 정점들에 대해서, 아직 확인하지 않은 정점이라면 확인한다.
	for (int i = 0; i < vec[to].size(); i++) {
		if (check[from][vec[to][i]] == 0)
			dfs(from, vec[to][i]);
	}
}

int main()
{
	scanf("%d", &n);
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			scanf("%d", &arr[i][j]);
			if (arr[i][j] == 1) { //연결돼있다면 벡터에 담는다.
				vec[i].push_back(j); //방향 그래프이기 때문에 양쪽으로 담지 않음.
			}
		}
	}
 
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
    //연결이 되어있고 확인하지 않은 정점이라면 확인한다.
			if (arr[i][j] == 1 && check[i][j] == 0) {
				dfs(i, j);
			}
		}
	}

//정답 출력.
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++) {
			printf("%d ", ans[i][j]);
		}
		printf("\n");
	}

	return 0;
}
