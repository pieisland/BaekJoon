#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
#include<queue>
using namespace std;

/*
하나는 bfs, 하나는 dfs로 풀었다.
그냥. 기본 문제.
*/

int n;
char map[100][100];
char map2[100][100];
int check[100][100];
int dir[4][2] = { {1, 0}, {-1, 0}, {0, 1}, {0, -1} };

bool isinside(int y, int x) {
	if (y >= 0 && y < n && x >= 0 && x < n) return true;
	else return false;
}

void checkClear() {
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
			check[i][j] = 0;
}

void dfs(int y, int x, char c) {

	check[y][x] = 1;

	for (int i = 0; i < 4; i++) {
		int ny = y + dir[i][0];
		int nx = x + dir[i][1];
		if (isinside(ny, nx) && check[ny][nx] == 0 && map[ny][nx]==c)
		{
			dfs(ny, nx, c);
		}
	}
}

void bfs(int y, int x, char c){
	queue<pair<int, int>> q;
	q.push({ y, x });
	check[y][x] = 1;

	while (!q.empty()) {
		int cy = q.front().first;
		int cx = q.front().second;
		q.pop();

		for (int i = 0; i < 4; i++) {
			int ny = cy + dir[i][0];
			int nx = cx + dir[i][1];
			if (isinside(ny, nx) && check[ny][nx] == 0 &&map2[ny][nx] ==c) {
				q.push({ ny, nx });
				check[ny][nx] = 1;
			}
		}
	}
}

int main()
{
	scanf("%d", &n);

	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++) {
			cin >> map[i][j];
			if (map[i][j] == 'G') {
				map2[i][j] = 'R';
			}
			else map2[i][j] = map[i][j];
		}

	int ans1 = 0;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			if (check[i][j] == 0) {
				dfs(i, j, map[i][j]);
				ans1++;
			}
		}
	}

	checkClear();
	int ans2 = 0;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			if (check[i][j] == 0) {
				bfs(i, j, map2[i][j]);
				ans2++;
			}
		}
	}

	printf("%d %d", ans1, ans2);

	return 0;
}
