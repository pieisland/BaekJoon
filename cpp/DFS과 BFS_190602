#include<iostream>
#include<vector>
#include<queue>
#include<algorithm>

using namespace std;

/*
기본을 구하는 건 같기 때문에 이전에 올려뒀던 것과 형태는 동일.
다만, 작은 수를 먼저 방문하라는 조건이 있었기 때문에 algorithm을 이용해서 sort를 해주었음.
*/

vector<int> arr[1001];
int c[1001];
int c2[1001];

void dfs(int n)
{
	if (c[n]) return;
	c[n] = 1;
	cout << n << " ";
	for (int i = 0; i < arr[n].size(); i++)
	{
		dfs(arr[n][i]);
	}
}

void bfs(int n)
{
	queue <int> q;
	q.push(n);
	c2[n] = 1;
	while (!q.empty())
	{
		int x = q.front();
		q.pop();
		cout << x << " ";
		for (int i = 0; i < arr[x].size(); i++)
		{
			int y = arr[x][i];
			if (c2[y] == 0) {
				q.push(y);
				c2[y] = 1;
			}
		}
	}
}

int main()
{
	int n, m, v;//정점의 개수, 간선의 개수, 시작 정점 번호
	cin >> n >> m >> v;// scanf("%d %d %d", &n, &m, &v);

	int a, b;
	for (int i = 0; i < m; i++)
	{
		cin >> a >> b;// scanf("%d %d", &a, &b);
		arr[a].push_back(b);
		arr[b].push_back(a);
	}

	for (int i = 1; i <= 1000; i++)
	{
		sort(arr[i].begin(), arr[i].end());
	}

	dfs(v);
	cout << endl;
	bfs(v);

	return 0;
}
