#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
#include<queue>
using namespace std;

int n, m;
vector<int> node[1001];
int visit[1001];

void dfs(int idx) {
	visit[idx] = 1;

	for (int i = 0; i < node[idx].size(); i++) {
		int idx2 = node[idx][i];
		if (visit[idx2] == 0)
			dfs(idx2);
	}
}

void bfs(int idx) {
	queue<int> q;
	q.push(idx);
	visit[idx] = 1;

	while (!q.empty()) {
		int now = q.front();
		q.pop();

		for (int i = 0; i < node[now].size(); i++) {
			int idx2 = node[now][i];
			if (visit[idx2] == 0)
			{
				visit[idx2] = 1;
				q.push(idx2);
			}
		}
	}
}

int main(void){
	
	cin >> n >> m;
	for (int i = 0; i < m; i++) {
		int a, b;
		cin >> a >> b;
		node[a].push_back(b);
		node[b].push_back(a);
	}

	int ans = 0;
	for (int i = 1; i <= n; i++) {
		if (visit[i] == 0) {
			//dfs(i);
			bfs(i);
			ans++;
		}
	}

	cout << ans << endl;

	return 0;
}
