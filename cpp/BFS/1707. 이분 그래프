#include <string>
#include <vector>
#include <iostream>
#include <queue>
#include <algorithm>

using namespace std;

/*
20.06.10.수
1707. 이분 그래프
일단 이분 그래프라는 것에 대해서 새로 알게됐다.
음.. 그냥 보이는대로 해석하자면
간선으로 연결된 두 정점이 서로 다른 색이어야 하는 것이다.

정의로 이야기를 하면 문제에서는 이렇게 이야기를 했다.
그래프 정점의 집합을 둘로 분할해서 각 집합에 속한
정점끼리는 서로 인접하지 않도록 분할할 수 있다고.
하지만 무슨 말인지 이해가 안갔음.. ^0^...
색을 다르게 칠한 게 서로 다른 집합일텐데
인접하지 않다는 것은 간선으로 연결이 안 돼 있다는 거겠죠.
그래서 이 문제를 풀 때 색칠하는 형태로 풀어가는 거였고..

허허.
위키피디아의 정의를 보면
모든 꼭짓점을 빨강과 파랑으로 색칠하되 모든 변이 빨강과 파랑 꼭짓점을 포함하도록
색칠할 수 있는 그래프.
라고 이야기를 하고 있다.

아.. 이게 더 이해가 잘된다. 그림 보면 더 이해 잘 되고.

아무튼 이분 그래프는 그렇다.
둘로 나눌 수 있는거다. 간선에 연결된 정점이 서로 다른 색을 띄는 거다.

이 문제를 풀 때 처음 틀렸던 부분은
bfs를 돌 때 1부터 돌고 끊어버렸다는 것..
전부 다 확인을 했어야 했는데 그렇게 안해서.
애초에 모든 정점들이 하나의 그룹에 들어있을 거라고 생각을 해서
놓친 부분이었다.
그래퍼 for문을 돌면서 아직 color값이 0인 게 있으면
그걸 기준으로 해서 확인할 수 있도록 고치니
정답이 떴다.
*/

vector<int> node[20001];
//색깔에 대한 정보를 가지고 있어야할텐데..
int color[20001];

void clearAll() {
	for (int i = 0; i <= 20000; i++) {
		color[i] = 0;
		node[i].clear();
	}
}

bool bfs(int n) {

	int num = n;
	queue<int> q;

	q.push(num);
	color[num] = 1;
	//색상이 다른 걸 표시하는 게 1, -1 하는 게 편할 것 같아서
	//그냥 이렇게 합니다.

	int check = 0;

	while (!q.empty()) {
		num = q.front();
		q.pop();

		for (int i = 0; i < node[num].size(); i++) {
			int tmp = node[num][i];
			if (color[tmp] == 0) { //0이면 아직 확인을 안 한 겁니다.
				color[tmp] = -color[num];
				q.push(tmp);
			}
			else if (color[tmp] == color[num]) {
				check = 1;
				break;
			}
		}
		if (check == 1) break;
	}

	//한 간선에 같은 색상이면 안됨.
	if (check == 1) {
		return false;
	}
	return true;
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	int k, v, e;//테스트 케이스 수, 정점의 수, 간선의 수

	cin >> k;
	for (int t = 0; t < k; t++) {
		cin >> v >> e;
		clearAll();
		for (int i = 0; i < e; i++) {
			//간선을 입력하자.
			int a, b;
			cin >> a >> b;
			node[a].push_back(b);
			node[b].push_back(a);
		}

		int check = 0;
		for (int i = 1; i <= v; i++) {
			if (color[i] == 0) {
				bool tbool = bfs(i);
				if (tbool == false) {
					check = 1;
					break;
				}
			}
		}

		if (check == 1) {
			cout << "NO" << '\n';
		}
		else
			cout << "YES" << '\n';
	}

	return 0;
}
