#include <iostream>
#include <queue>

using namespace std;

int n;
int nums[12];
int op[4];
int maxval=-1000000000;
int minval=1000000000;

void dfs(int depth, int ans, int p, int m, int mu, int d)
{
	//연산자 다 썼다면
	if(depth == n)//
	{
		if(ans<minval) minval=ans;
		if(ans>maxval) maxval=ans;
		return;
	}

	if(p>0)
		dfs(depth+1, ans+nums[depth], p-1, m, mu, d);
	if(m>0)
		dfs(depth+1, ans-nums[depth], p, m-1, mu, d);
	if(mu>0)
		dfs(depth+1, ans*nums[depth], p, m, mu-1, d);
	if(d>0)
		dfs(depth+1, ans/nums[depth], p, m, mu, d-1);
}

int main()
{
	cin>>n;
	for(int i=0;i<n;i++)
		cin>>nums[i];
	
	for(int i=0;i<4;i++)
		cin>>op[i];

	dfs(1, nums[0], op[0], op[1], op[2], op[3]);

	cout<<maxval<<endl<<minval<<endl;

	return 0;
}


/*
int n, m;
queue<pair<int, int>> q;//얘의 의미는 뭐나면
//음...인덱스랑 중요도 넣어줄거야.
//0부터 넣어서 중요도도 넣어주고 꺼낼 때
//원래 찾고자 했던 idx인지를 비교해서 하면 됨.

int main(void)
{ 
	cin>>n;
	int number, idx;
	
	//전체 n번 수행하기.
	for(int i=0;i<n;i++)
	{
		cin>>number>>idx;
		for(int j=0;j<number;j++)
		{
			int a;//중요도.
			cin>>a;
			q.push(make_pair(j, a));
		}
		
		//큐를 꺼내본다.
		while(1)
		{
			int tmp = q.front().second;//중요도를 비교합니다.
			for(int i=1;i<q.size();i++)
				if(큐의 몇 번째 값을 알 수 있는 께 아닌데..ㅋㅋㅋ)
					q.
		


		}


		//내가 구하고자 하는 애가 다 꺼내지기 전에 나올 수가 있으니
		//비워준다.
		while(!q.empty())
			q.pop();

	}


    return 0;
}
*/
