#include <string>
#include <vector>
#include <iostream>
#include <queue>
#include <algorithm>
#include <cstring>
#include <deque>

using namespace std;

/*
20.06.12. 토
11003. 최솟값 찾기
https://jaimemin.tistory.com/746
이 분은 진짜 꾸준하시다. 언행일치이신 분..

이 문제는 슬라이딩 윈도우 문제로 deque 자료구조를 사용해서
풀었다. 덱은 처음 써본다.
자료구조 시간에 배우긴 했었는데 앞 뒤에서 푸시 팝을 할 수 있는 자료구조다.
잠깐 검색해본 결과에 의하면 vector의 문제를 개선하기 위해
만든 자료구조라고 함. 단순 기능적인 측면 말고도 다른 이유도 있더라.

정리를 해보자면
덱에는 최대 l개의 숫자만 들어갈 수 있다.
덱에 수를 넣을 때 오름차순이 되도록 하여
(while문에 의해 구현됨)
맨 처음 수가 가장 작은 수가 되도록 하고 
맨 마지막 수가 가장 큰 수가 되도록 한다.

실제 구현에서
덱이 비지 않아서 덱에 들어있는 수를 확인할 수 있다면
맨 앞 수의 인덱스가 i-l보다 작을 때는 빼야한다.
왜냐하면 인덱스 i일 때 i-l+1부터 i까지의 인덱스 값만 들어갈 수 있기 때문.
그래야 l개이다.
그래서 뺴고 
while문을 통해서 오름차순이 되도록 지금 들어가려는 값보다
더 큰 값이 뒤에 있거나 덱이 빌 때까지 뺀다.
그 후에 현재 값을 넣어주면 오름차순 정렬이 되고
가장 작은 값을 출력해야 되기 때문에 맨 앞 값을 출력하면 된다.

구간에 있는 가장 작은 값을 찾기 위해서 이중for문을 돈다거나 그렇게 하는 게 아니라
이런 식으로 구현하는 게 더 빠르구나.
좋은 걸 배운듯.. 흑흑. 슬라이딩 윈도우 ㅠㅠ.
*/

//아 500만은 되구나.. 몰랐..
int arr[5000000];
deque<pair<int, int>> deq;

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	int n, l;
	cin >> n >> l;
	for (int i = 0; i < n; i++) {
		cin >> arr[i];
	}

	for (int i = 0; i < n; i++) {

		//덱에는 최대 l개의 숫자만 있게 하자.
		//맨 처음에 들어간 애의 인덱스가 저거 이하이면 빼야된다.
		if (!deq.empty() && deq.front().second <= i - l) {
			deq.pop_front();
		}

		//arr[i]를 가장 큰 숫자로 만들어서 오름차순이 되게 하자.
		while (!deq.empty() && deq.back().first > arr[i])
			deq.pop_back();

		deq.push_back({ arr[i], i });
		cout << deq.front().first << ' ';
	}
	cout << '\n';

	return 0;
}
