#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
#include<queue>
using namespace std;

/*
19.06.12.수.
플로이드 와샬만 알면 풀 수 있는 문제.
초기화로 큰 값을 넣어주어야 하고
무방향 그래프이기 때문에 두 개의 방향에 값을 함께 넣어준다.
그리고 가장 빠르게 갈 수 있는 값을 찾아서 다 더해준 후 비교하면 되는 문제.
*/

int MAX = 1000000;
int n, m;
int arr[101][101];
int ans[101];

int visit[101];
int connect[101];
int rbfs[101];

void bfs(int a)
{
	queue<int> q;
	q.push(a);
	visit[a] = 1;

	while (!q.empty())
	{
		int x = q.front();
		q.pop();

		for (int i = 1; i <= n; i++)
		{
			if (arr[x][i] == 1 && visit[i] == 0)
			{
				visit[i] = 1;
				q.push(i);
        
        //이부분이 중요. 처음 a와 연결된 친구를 직접 연결된 친구로 찾아가기.
				connect[i] = connect[x] + 1;
			}
		}
	}
}

int main(void)
{
	cin >> n >> m;

	//초기화.
	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= n; j++)
			arr[i][j] = MAX;

	int a, b;
	//무방향 그래프이기 떄문에 서로 넣어준다.
	for (int i = 0; i < m; i++)
	{
		cin >> a >> b;
		arr[a][b] = 1;
		arr[b][a] = 1;
	}

	//BFS로 푸는 방법.
	for (int i = 1; i <= n; i++)
	{
		bfs(i);
		for (int j = 1; j <= n; j++)
		{
			if (i == j) continue;
			rbfs[i] = rbfs[i] + connect[j];
		}

		//한 줄 하면 다시 초기화해서 다른 줄 확인.
    //초기화하는 방법도 알아두기.
		memset(visit, 0, sizeof(visit));
		memset(connect, 0, sizeof(connect));
	}

	int min2 = rbfs[1];
	int idx2;
	for (int i = 2; i <= n; i++)
	{
		if (min2 > rbfs[i]) {
			min2 = rbfs[i];
			idx2 = i;
		}
	}
	cout << idx2 << endl;

	return 0;
}
