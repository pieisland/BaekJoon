import java.util.Scanner;
//자바는 벡터를 쓰려면 이렇게 임포트 하면 된다.
import java.util.Vector;

//자바는 static 이 중요하다. 전역으로 쓰려면 static 써야되는듯.
//c++이랑 다른 것등를 이해하면서 하자
//그리조 자바는 정수값을 true, false로 형변환 할 수 없다.
//그래서 rect 함수에서 map 값이 1이라고 명시를 해줘야 함.

public class Main {

	static int map[][] = new int[101][101];
	static int dir[][]= {{0, 1}, {-1, 0}, {0, -1}, {1, 0}};
	
	public static int rect() {
	
		int ans=0;
		
		for(int i=0;i<100;i++) {
			for(int j=0;j<100;j++) {
				if(map[i][j]==1&&map[i+1][j]==1&&map[i][j+1]==1&&map[i+1][j+1]==1)
					ans++;
			}
		}
		return ans;
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		int n;
		int x, y, d, g;
		//자바는 배열을 생성할 때 c언어처럼 변수명에 숫자를 쓰면 안된다.
		//헷갈리게스리.
		//이렇게 하는 방법이 두 개가 있다. 값을 나중에 넣어줄 수 있다.
		
		//자바의 벡터 선언은 다음과 같이 한다.
		//방향 정보를 담는다.
		Vector<Integer> list = new Vector<Integer>();
		
		Scanner sc = new Scanner(System.in);
		n=sc.nextInt();
		for(int i=0;i<n;i++) {
			x = sc.nextInt();
			y = sc.nextInt();
			d = sc.nextInt();
			g = sc.nextInt();
			
			//vector 값을 추가하는 방법은 addElement 메소드 활용.
			list.addElement(d);
			
			for(int j=0;j<g;j++) {
				int s = list.size()-1;
				for(int k=s;k>=0;k--) {
					//자바의 벡터에서 특정 인덱스에 속한 값을 불러들이는 것은
					//get이라는 메소드를 사용. c++이랑 다르네..
					list.addElement((list.get(k)+1)%4);
				}
			}
			
			map[y][x]=1;
			for(int k=0;k<list.size();k++) {
				y = y+dir[list.get(k)][0];
				x = x+dir[list.get(k)][1];
				map[y][x]=1;
			}
			
			//벡터 초기화는 동일하게 clear를 사용하면 된다.
			list.clear();
		}
		
		System.out.println(rect());
				
	}

}
