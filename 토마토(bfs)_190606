#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
#include<queue>
using namespace std;

/*
이제까지 했던 bfs와 다르게
모든 가능한 경우에 대해 먼저 queue에 다 넣은 후에 진행.
*/

int m, n;
int a[1000][1000];
int check[1000][1000];
int dir[4][2] = { {1, 0}, {-1, 0}, {0, 1}, {0, -1} };

queue<pair<int, int>> que;

int isInside(int a, int b)
{
	if (a >= 0 && a < n&&b >= 0 && b < m)
		return 1;
	else
		return 0;
}

void bfs2()
{
	while (!que.empty())
	{
		int cy = que.front().first;
		int cx = que.front().second;
		que.pop();

		for (int i = 0; i < 4; i++)
		{
			int ny = cy + dir[i][0];
			int nx = cx + dir[i][1];
			//그 점이 범위가 맞고, 안 익은 토마토이며, 아직 안 본 애라면.
			if (isInside(ny, nx) && a[ny][nx] == 0 && check[ny][nx] == 0)
			{
				que.push(pair<int, int>(ny, nx));
				check[ny][nx] = check[cy][cx] + 1;
			}
		}
	}
}

int main()
{
	cin >> m >> n;

	int zero = 0;
	int one = 0;
	int minus = 0;

	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			cin >> a[i][j];
			if (a[i][j] == 0)
				zero++;
			else if (a[i][j] == 1)
				one++;
			else//-1을 했음.
				minus++;
		}
	}

	if (one != 0 && one + minus == m * n)
	{
		cout << 0;
		return 0;
	}
		
	if (minus == m * n) {
		cout << -1;//이런 상황이 있는지는 모르겠음.
		return 0;
	}

	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			if (check[i][j] == 0 && a[i][j] == 1)//아직 안 갔고 토마토가 있으면
			{
				//일단 맨 처음 1인 애들 모두에 대해 먼저 해야됨.
				que.push(pair<int, int>(i, j));
				//bfs(i, j, 0);//근데... 맨 첫 날이 0일 지난 거라서 저렇게 되는데..;
				check[i][j] = 1;
			}
			if (a[i][j] == -1)
			{
				check[i][j] = -1;
			}
		}
	}
	bfs2();

	//여기서 0의 수가 하나라도 있으면 return -1
	//0의 수가 없으면 제일 큰 수 반환.
	zero = 0;
	int max = -10;
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			if (check[i][j] == 0)
				zero++;
			//cout << check[i][j]<<" ";
			if (check[i][j] > max)
				max = check[i][j];
		}
		//cout << endl;
	}

	if (zero > 0)//안 익은 토마토가 있는거..
		cout<< -1;
	else//다 익었으면
		cout << max - 1;

	return 0;
}
